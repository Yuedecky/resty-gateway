
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_package_path '../?.lua;/usr/local/nginx/lua-scripts/?.lua;;';

    lua_package_cpath '/usr/local/lib/lua/5.1/?.so;;';


    init_worker_by_lua '
        local delay = 3
        local new_timer = ngx.timer.at
        local log = ngx.log
        local ERR = ngx.ERR
        local check

        check = function(premater)
            if not premater then
                local ok,err = new_timer(delay,check)
                if not ok then
                    log(ERR,"failed to create timer:",err)
                    return
                end
            end
        end

        local hdl,err = new_timer(delay,check)
        if not hdl then

            log(ERR,"failed to create timer:",err)
            return
        end



    ';
    ## lua_package_path "$prefix/app/lib/?.lua;$prefix/app/etc/?.lua;$prefix/app/src/?.lua;$prefix/../luajit/share/lua/5.1/?.lua;;";
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_shared_dict dogs 1m;

    init_by_lua_block {
        local dogs = ngx.shared.dogs;
        require "cjson"
    }

    

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        lua_code_cache off;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /nginx_var {

            rewrite_by_lua_file lua-scripts/rewrite.lua;
            access_by_lua_file lua-scripts/access.lua;
            content_by_lua_file lua-scripts/content.lua;
        }

        location /echo {
            echo "$echo_request_method";
        }

        location /foo {
            content_by_lua_file  lua-scripts/test_foo.lua;
        }

        location ~ ^/app/([-_a-zA-Z0-9/]+) {
            set $path $1;
            content_by_lua_file lua/$path.lua;
        }


        location /access {
            client_max_body_size 100k;
            client_body_buffer_size 100k;

            access_by_lua_block {
                -- check the client ip address
                if ngx.var.remote_addr == '192.168.106.2' then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                -- check if the URI contains bad words
                if ngx.var.uri 
                    --and
                    -- string.match(ngx.var.request_body,'evil')
                then
                    return ngx.redirect("html/index.html")
                end
            }
        }

        location /other {
            set $dog "$dog world";
            echo "$uri dog: $dog";
        }

        location /lua {
            set $dog "hello";
            content_by_lua_block {
                res = ngx.location.capture("/other",
                        {copy_all_vars = true}
                    )
                ngx.print(res.body)
                ngx.say(ngx.var.uri,":",ngx.var.dog)
            }
        }


        location /data {
            content_by_lua_block {
                local mydata = require "data"
                ngx.say(mydata.get_age("dog"))
            }

        }

        location /test {
            content_by_lua_block {
                ngx.say("dog=",ngx.var.dog)
                ngx.say("cat = ",ngx.var.cat)
            }
        }

        location /for_test {
            set $dog "";
            set $cat "";
            content_by_lua_block {
                res = ngx.location.capture("/test",
                        {vars = {dog = "hello",cat=32}}
                    )
                ngx.print(res.body)
            }
        }

        location /sub {
                content_by_lua_block {
                ngx.ctx.foo = "bar";
            }
        }
        location /test_sub {
            content_by_lua_block {
                res = ngx.location.capture("/sub", { ctx = ngx.ctx })
                ngx.say(ngx.ctx.foo);
            }
        }

        location = /api {
            content_by_lua_block {
                -- the flowing require() will just return the already loaded module from package.loaded
                ngx.say( require "cjson".encode{dog =5 ,name="bla..."})
            }
        }


        location /dogs {
            content_by_lua_block {
                local dogs = ngx.shared.dogs
                ngx.say(dogs:get("Tom"))
            }
             
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
